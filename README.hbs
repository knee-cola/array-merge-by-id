# What's this?

This is a set of functions specialized in comparing and merging arrays of elements signed by unique set of IDs.
This is typically used in scenario in which client-side data-sets with changes comming from the an SQL server (server > client replication).

The center stage of this toolkit is the `mergeA` function, which merges two arrays. The following snippet demonstrates how this function can apply (merging, replicating) changes to an existing data array:

```javascript
let currData = [
    {cityID:1, cityName:'New York'},
    {cityID:2, cityName:'Londonnnnn'} // there's a typo here
];

let newData = [
    {cityID:2, cityName:'London'}, // typo is fixed
    {cityID:3, cityName:'Rome' } // new city is added
];

// function which applies changes to an existing element
// - it will be called for each matched pair of elements
let mergeFn = (element, changes) => { element.cityName = changes.cityName; };

let result = mergeA(currData, newData, ['cityID'], { callbackFn: mergeFn });

// the following statement will print
//  [
//     {cityID:1, cityName:'New York'},
//     {cityID:2, cityName:'London'},    <= name is fixed
//     {cityID:3, cityName:'Rome' }      <= new city is added
//  ];
console.dir(currData);
```

Documentation for each of the functions can be found below ...

# How to install?

Simply open up a terminal, go to your project directory and run:
```
npm i --save array-merge-by-id
```

{{>main}}

# Param types

## `key_columns<CompareBy>` param

Functions which compare array elements need to be instructed how two elements can be compared. This can be done in two ways:

* by passing a comparer function, which receives tow elements and returns a numeric value indicating the relation of the objects
* by passing an array of ID property names, which should be compared to determin the relation of the two objects

If an array of property names is passed, a comparer function will be compiled automatically (via `compileC`) function.

### Descending order

If a ID name array is passed as `key_columns` params, the compiled function will compare elements in ascending order.
We can change this behaviour by appending `:desc` to a ID name ... like so: ['cityID:desc','streetID:desc']

## `config<ArrayDiffConfig>` param

We can modify the way the functions work, by providing an **config object**. All the options in the `config` object are optional.

Here's a list of available options:

* [`sortLeftBy`](#sortleftby-and-sortrightby) - how should the `leftA` array be sorted
* [`sortRightBy`](#sortleftby-and-sortrightby) - how should the `rightA` be sorted
* `skipSort` - set it to `true` if arrays are not to be sorted
* `unique` - set it to `true` if are all the array elements unique - it speeds up the algorithm
* `linkName` - property assigned to the `rightA` elements, which should be pointing to the matching element in the `leftA`
* `mapName` - property assigned to the `leftA` elements, containig array of all the matched elemens from the `rightA`
* `callbackFn` - a callback function, which should be called for each of the matched element pairs

### `sortLeftBy` and `sortRightBy`

**Description:** defines how the arrays passed to the function should be sorted
**Defaults to**: value passed as `key_columns` param
**Expected value**: we can pass a function or an array of ID param names (see [`key_columns<ompareBy>`](#key_columnscompareby-param))

In order to be more efficient, functions wich rely on comparing array elements will sort both of the given arrays.

By default the functions use `key_columns` parameter to sort the arrays.

This can be overriden by specifying a dedicated sorting order for each of the two arrays:
* `config.sortLeftBy` = defines how the left array should be sorted (passed as the first param)
* `config.sortRightBy` = defines how the right array should be sorted (passed as the second param)

Sorting of an array can be disabled by assigning `null` to corresponding sort config param:
```javascript
{
    sortLeftBy: null // don't sort the left array
}
```

## `config<ArrayPurgeConfig>` param

This config si very similar to `ArrayDiffConfig` param type. The following params are the same as in `ArrayDiffConfig`:
* `sortLeftBy`
* `sortRightBy`
* `skipSort`

The following params are unique to this param type:

* `sortBy` = how should both arrays be sorted
* `mapRemoved` - flag indicating should removed elements be mapped and returned
* `matchMulti` - can an element from the hit list array be matched with multiple elements from the target array (defaults to `false`)

## `config<ArrayUniqueConfig>` param

* `skipSort` - set it to `true` if arrays are not to be sorted
* `elFreq` - output param - an array in which element frequency is to be recorded (see the example given in the [`uniqueA` method description](#uniqueA))

# Return Types
## `ArrayDiffResult`
``ArrayDiffResult`` contains results of comparing two arrays. It has the following structure:
```javascript
{
    // an array of elements from left array (`leftA` param), which have not
    // been mathced with any of the elements of the right array (`rightA` param)
    leftDiff:Array<T>,
    // an array of elements from left array (`leftA` param), which have been mathced with at leas one element of the right array (`rightA` param)
    leftCommon:Array<T>,
    // an array of elements from right array (`rightA` param), which have not
    // been mathced with any of the elements of the left array (`leftA` param)
    rightCommon:Array<K>,
    // an array of elements from right array (`rightA` param), which have been mathced with at leas one element of the left array (`leftA` param)
    rightDiff:Array<K>
}
```

## `ArrayLinkResult`
``ArrayLinkResult`` contains results of linking two arrays. It has the following structure:
```javascript
{
    // parent elements with no matched child elements
    childless:Array<T>,
    // parent elements with matching children
    parents:Array<T>,
    // child elements with matching parent
    children:Array<K>,
    // child elements without a matching parent
    orphans:Array<K>
}
```

# License
MIT License, [http://www.opensource.org/licenses/MIT](http://www.opensource.org/licenses/MIT)